swagger: '2.0'
info:
  version: '1.0'
  title: Postman Echo
  description: >-
    Postman Echo is service you can use to test your REST clients and make sample API calls. It provides endpoints for `GET`, `POST`, `PUT`, various auth mechanisms and other utility endpoints.


    The documentation for the endpoints as well as example responses can be found at [https://postman-echo.com](https://postman-echo.com/?source=echo-collection-app-onboarding)
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: postman-echo.com
basePath: /
securityDefinitions:
  auth:
    type: basic
    x-testValue: []
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:
  /digest-auth:
    get:
      description: >-
        This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.


        Within Postman, for this request to successfully authenticate, running the previous request "DigestAuth Request" stores the relevant information within the global variables.
      summary: DigestAuth Success
      tags:
      - 'Auth: Digest'
      operationId: DigestAuth Success
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/DigestauthSuccessresponse'
          examples:
            application/json:
              authenticated: true
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /digest-auth
          headers:
            Authorization: Digest username="postman", realm="Users", nonce="ni1LiL0O37PRRhofWdCLmwFsnEtH1lew", uri="/digest-auth", response="254679099562cf07df9b6f5d8d15db44", opaque=""
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Connection: keep-alive
            Content-Encoding: gzip
            Content-Length: 42
            Content-Type: application/json; charset=utf-8
            Date: Thu, 29 Oct 2015 06:17:51 GMT
            Server: nginx/1.6.2
            Vary: Accept-Encoding
            X-Powered-By: Sails <sailsjs.org>
          body: '{"authenticated":true}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: DigestAuth Success
        x-testDescription: >-
          This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.


          Within Postman, for this request to successfully authenticate, running the previous request "DigestAuth Request" stores the relevant information within the global variables.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /basic-auth:
    get:
      description: "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app."
      summary: Basic Auth
      tags:
      - 'Auth: Others'
      operationId: Basic Auth
      produces:
      - application/json
      parameters:
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/BasicAuthresponse'
          examples:
            application/json:
              authenticated: true
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /basic-auth
          headers:
            Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Connection: keep-alive
            Content-Encoding: gzip
            Content-Length: 42
            Content-Type: application/json; charset=utf-8
            Date: Sat, 31 Oct 2015 06:38:25 GMT
            Server: nginx/1.6.2
            Vary: Accept-Encoding
            X-Powered-By: Sails <sailsjs.org>
          body: '{"authenticated":true}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Basic Auth
        x-testDescription: "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /oauth1:
    get:
      description: "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes."
      summary: OAuth1.0 Verify Signature
      tags:
      - 'Auth: Others'
      operationId: OAuth1.0 Verify Signature
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Oauth1.0VerifySignatureresponse'
          examples:
            application/json:
              status: pass
              message: OAuth-1.0a signature verification was successful
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /oauth1
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Access-Control-Expose-Headers: ''
            Connection: keep-alive
            Content-Encoding: gzip
            Content-Length: 95
            Content-Type: application/json; charset=utf-8
            Date: Thu, 25 Aug 2016 10:34:23 GMT
            ETag: W/"4e-Cq3UhvpVSyl6R6204lPVIA"
            Server: nginx/1.8.1
            Vary: Accept-Encoding
          body: '{"status":"pass","message":"OAuth-1.0a signature verification was successful"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: OAuth1.0 Verify Signature
        x-testDescription: "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /auth/hawk:
    get:
      description: >-
        This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).


        In order to use this endpoint, select the "Hawk Auth" helper inside Postman, and set the following values:


        Hawk Auth ID: `dh37fgj492je`


        Hawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`


        Algorithm: `sha256`


        The rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.
      summary: Hawk Auth
      tags:
      - 'Auth: Others'
      operationId: Hawk Auth
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/HawkAuthresponse'
          examples:
            application/json:
              status: pass
              message: Hawk Authentication successful
      security:
      - auth: []
      x-unitTests:
      - request:
          method: GET
          uri: /auth/hawk
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Connection: keep-alive
            Content-Encoding: gzip
            Content-Type: application/json
            Date: Thu, 31 Mar 2016 11:12:16 GMT
            Server: nginx/1.6.2
            Server-Authorization: Hawk mac="vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=", hash="qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE="
            Vary: Accept-Encoding
            X-Powered-By: Sails <sailsjs.org>
            transfer-encoding: chunked
          body: '{"status":"pass","message":"Hawk Authentication successful"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Hawk Auth
        x-testDescription: >-
          This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).


          In order to use this endpoint, select the "Hawk Auth" helper inside Postman, and set the following values:


          Hawk Auth ID: `dh37fgj492je`


          Hawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`


          Algorithm: `sha256`


          The rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /cookies/set:
    get:
      description: >-
        The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.


        To set your own set of cookies, simply replace the URL parameters "foo1=bar1&foo2=bar2" with your own set of key-value pairs.
      summary: Set Cookies
      tags:
      - Cookies
      operationId: Set Cookies
      produces:
      - application/json
      parameters:
      - name: foo1
        in: query
        required: true
        type: string
        description: ''
      - name: foo2
        in: query
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/SetCookiesresponse'
          examples:
            application/json:
              cookies:
                foo1: bar
                foo2: bar
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /cookies/set?foo1=bar1&foo2=bar2
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Connection: keep-alive
            Content-Encoding: gzip
            Content-Length: 51
            Content-Type: application/json; charset=utf-8
            Date: Thu, 29 Oct 2015 06:15:28 GMT
            Server: nginx/1.6.2
            Vary: Accept-Encoding
            X-Powered-By: Sails <sailsjs.org>
          body: '{"cookies":{"foo1":"bar","foo2":"bar"}}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Set Cookies
        x-testDescription: >-
          The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.


          To set your own set of cookies, simply replace the URL parameters "foo1=bar1&foo2=bar2" with your own set of key-value pairs.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /cookies:
    get:
      description: Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the "Set Cookies" endpoint, will be returned as response JSON.
      summary: Get Cookies
      tags:
      - Cookies
      operationId: Get Cookies
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/GetCookiesresponse'
          examples:
            application/json:
              cookies:
                foo2: bar
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /cookies
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Connection: keep-alive
            Content-Encoding: gzip
            Content-Length: 46
            Content-Type: application/json; charset=utf-8
            Date: Thu, 29 Oct 2015 06:16:29 GMT
            Server: nginx/1.6.2
            Vary: Accept-Encoding
            X-Powered-By: Sails <sailsjs.org>
          body: '{"cookies":{"foo2":"bar"}}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Cookies
        x-testDescription: Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the "Set Cookies" endpoint, will be returned as response JSON.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /cookies/delete:
    get:
      description: One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.
      summary: Delete Cookies
      tags:
      - Cookies
      operationId: Delete Cookies
      produces:
      - application/json
      parameters:
      - name: foo1
        in: query
        required: true
        type: string
        description: ''
      - name: foo2
        in: query
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/DeleteCookiesresponse'
          examples:
            application/json:
              cookies:
                foo2: bar
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /cookies/delete?foo1=&foo2=
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Connection: keep-alive
            Content-Encoding: gzip
            Content-Length: 46
            Content-Type: application/json; charset=utf-8
            Date: Thu, 29 Oct 2015 06:16:00 GMT
            Server: nginx/1.6.2
            Vary: Accept-Encoding
            X-Powered-By: Sails <sailsjs.org>
          body: '{"cookies":{"foo2":"bar"}}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Delete Cookies
        x-testDescription: One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /headers:
    get:
      description: >-
        A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.

        In Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.
      summary: Request Headers
      tags:
      - Headers
      operationId: Request Headers
      produces:
      - application/json
      parameters:
      - name: my-sample-header
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/RequestHeadersresponse'
          examples:
            application/json:
              headers:
                host: echo.getpostman.com
                accept: '*/*'
                accept-encoding: gzip, deflate, sdch
                accept-language: en-US,en;q=0.8
                cache-control: no-cache
                my-sample-header: Lorem ipsum dolor sit amet
                postman-token: 3c8ea80b-f599-fba6-e0b4-a0910440e7b6
                user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36
                x-forwarded-port: 443
                x-forwarded-proto: https
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /headers
          headers:
            my-sample-header: Lorem ipsum dolor sit amet
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Connection: keep-alive
            Content-Encoding: gzip
            Content-Length: 342
            Content-Type: application/json; charset=utf-8
            Date: Thu, 31 Mar 2016 11:14:00 GMT
            Server: nginx/1.6.2
            Vary: Accept-Encoding
            X-Powered-By: Sails <sailsjs.org>
          body: '{"headers":{"host":"echo.getpostman.com","accept":"*/*","accept-encoding":"gzip, deflate, sdch","accept-language":"en-US,en;q=0.8","cache-control":"no-cache","my-sample-header":"Lorem ipsum dolor sit amet","postman-token":"3c8ea80b-f599-fba6-e0b4-a0910440e7b6","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36","x-forwarded-port":"443","x-forwarded-proto":"https"}}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Request Headers
        x-testDescription: >-
          A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.

          In Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /response-headers:
    get:
      description: >-
        This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.


        To send your own set of headers, simply add or replace the the URL parameters with your own set.
      summary: Response Headers
      tags:
      - Headers
      operationId: Response Headers
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: query
        required: true
        type: string
        description: ''
      - name: test
        in: query
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/ResponseHeadersresponse'
          examples:
            application/json:
              Content-Type: text/html
              test: response_headers
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /response-headers?Content-Type=text/html&test=response_headers
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Connection: keep-alive
            Content-Encoding: gzip
            Content-Length: 71
            Content-Type: text/html; charset=utf-8
            Date: Thu, 31 Mar 2016 11:14:18 GMT
            Server: nginx/1.6.2
            Vary: Accept-Encoding
            X-Powered-By: Sails <sailsjs.org>
            test: response_headers
          body: '{"Content-Type":"text/html","test":"response_headers"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Response Headers
        x-testDescription: >-
          This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.


          To send your own set of headers, simply add or replace the the URL parameters with your own set.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /get:
    get:
      description: "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested."
      summary: GET Request
      tags:
      - Request Methods
      operationId: GET Request
      produces:
      - application/json
      parameters:
      - name: test
        in: query
        required: true
        type: integer
        format: int32
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/GetRequestresponse'
          examples:
            application/json:
              args:
                test: 123
              headers:
                host: postman-echo.com
                accept: '*/*'
                accept-encoding: gzip, deflate
                cache-control: no-cache
                cookie: sails.sid=s%3AUutrvBPR7oZVxxHmfZEtoZ5i9qKn9pWv.Oc8fg2eMyvx0SPQqHsYjCRIsHsuEtkbBUcfdrjt0J%2B4
                postman-token: c746bc0f-ecf8-49f5-89f7-0f84d202cfc6
                user-agent: PostmanRuntime/6.4.1
                x-forwarded-port: 443
                x-forwarded-proto: https
              url: https://postman-echo.com/get?test=123
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /get?test=123
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Access-Control-Expose-Headers: ''
            Connection: keep-alive
            Content-Encoding: gzip
            Content-Length: 327
            Content-Type: application/json; charset=utf-8
            Date: Thu, 23 Nov 2017 13:57:27 GMT
            ETag: W/"1af-MYOnsOF5z4AQSuT2v19TNw"
            Server: nginx
            Vary: Accept-Encoding
          body: '{"args":{"test":"123"},"headers":{"host":"postman-echo.com","accept":"*/*","accept-encoding":"gzip, deflate","cache-control":"no-cache","cookie":"sails.sid=s%3AUutrvBPR7oZVxxHmfZEtoZ5i9qKn9pWv.Oc8fg2eMyvx0SPQqHsYjCRIsHsuEtkbBUcfdrjt0J%2B4","postman-token":"c746bc0f-ecf8-49f5-89f7-0f84d202cfc6","user-agent":"PostmanRuntime/6.4.1","x-forwarded-port":"443","x-forwarded-proto":"https"},"url":"https://postman-echo.com/get?test=123"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: GET Request
        x-testDescription: "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /post:
    post:
      description: "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter."
      summary: POST Form Data
      tags:
      - Request Methods
      operationId: POST Form Data
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - name: strange
        in: formData
        required: true
        type: string
        description: ''
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: POST
          uri: /post
          headers:
            Content-Type: application/x-www-form-urlencoded
          body: strange=boom
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: POST Form Data
        x-testDescription: "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /put:
    put:
      description: "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n"
      summary: PUT Request
      tags:
      - Request Methods
      operationId: PUT Request
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: PUT
          uri: /put
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: PUT Request
        x-testDescription: "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n"
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /patch:
    patch:
      description: "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
      summary: PATCH Request
      tags:
      - Request Methods
      operationId: PATCH Request
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /patch
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: PATCH Request
        x-testDescription: "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /delete:
    delete:
      description: "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
      summary: DELETE Request
      tags:
      - Request Methods
      operationId: DELETE Request
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: DELETE
          uri: /delete
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: DELETE Request
        x-testDescription: "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /status/200:
    get:
      description: "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`."
      summary: Response Status Code
      tags:
      - Utilities
      operationId: Response Status Code
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/ResponseStatusCoderesponse'
          examples:
            application/json:
              status: 200
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /status/200
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Connection: keep-alive
            Content-Length: 14
            Content-Type: application/json; charset=utf-8
            Date: Thu, 31 Mar 2016 11:58:47 GMT
            ETag: W/"e-1056260003"
            Server: nginx/1.6.2
            Vary: Accept-Encoding
            X-Powered-By: Sails <sailsjs.org>
          body: '{"status":200}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Response Status Code
        x-testDescription: "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /stream/10:
    get:
      description: >-
        This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.


        A streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.
      summary: Streamed Response
      tags:
      - Utilities
      operationId: Streamed Response
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /stream/10
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Streamed Response
        x-testDescription: >-
          This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.


          A streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /delay/3:
    get:
      description: >-
        Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.


        Note that a maximum delay of 10 seconds is accepted by the server.
      summary: Delay Response
      tags:
      - Utilities
      operationId: Delay Response
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/DelayResponseresponse'
          examples:
            application/json:
              delay: 3
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /delay/3
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Access-Control-Expose-Headers: ''
            Connection: keep-alive
            Content-Length: 13
            Content-Type: application/json; charset=utf-8
            Date: Mon, 02 Jan 2017 09:19:03 GMT
            ETag: W/"d-t/L/D5c0SDl+MoXtKdSVOg"
            Server: nginx/1.10.1
            Vary: Accept-Encoding
          body: '{"delay":"3"}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Delay Response
        x-testDescription: >-
          Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.


          Note that a maximum delay of 10 seconds is accepted by the server.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /encoding/utf8:
    get:
      description: >-
        If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.


        This endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.
      summary: Get UTF8 Encoded Response
      tags:
      - Utilities
      operationId: Get UTF8 Encoded Response
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /encoding/utf8
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get UTF8 Encoded Response
        x-testDescription: >-
          If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.


          This endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /gzip:
    get:
      description: >-
        This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).

        The uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.


        HTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.

        To know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.
      summary: GZip Compressed Response
      tags:
      - Utilities
      operationId: GZip Compressed Response
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /gzip
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: GZip Compressed Response
        x-testDescription: >-
          This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).

          The uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.


          HTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.

          To know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /deflate:
    get:
      description: "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article."
      summary: Deflate Compressed Response
      tags:
      - Utilities
      operationId: Deflate Compressed Response
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /deflate
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Deflate Compressed Response
        x-testDescription: "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /ip:
    get:
      description: >-
        A simple `GET` request to return the IP address of the source request in the following `JSON` format:


        ```json

        {
          ip: "request-ip-address"
        }

        ```
      summary: IP address in JSON format
      tags:
      - Utilities
      operationId: IP address in JSON format
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /ip
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: IP address in JSON format
        x-testDescription: >-
          A simple `GET` request to return the IP address of the source request in the following `JSON` format:


          ```json

          {
            ip: "request-ip-address"
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /time/now:
    get:
      description: >-
        A simple `GET` request to `/time/now` to return the current timestamp as a UTC string.


        ```

        Fri, 04 Nov 2016 09:00:46 GMT

        ```
      summary: Current UTC time
      tags:
      - Utilities / Date and Time
      operationId: Current UTC time
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          schema:
            type: object
          examples: {}
      security: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /time/valid:
    get:
      description: >-
        A simple `GET` request to `/time/valid` to determine the validity of the timestamp, (current by default).

        This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


        Responses are provided in JSON format, with a valid key to indicate the result. The response code is `200`.


        ```

        {
          valid: true/false
        }

        ```
      summary: Timestamp validity
      tags:
      - Utilities / Date and Time
      operationId: Timestamp validity
      produces:
      - application/json
      parameters:
      - name: timestamp
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/TimestampValidityresponse'
          examples:
            application/json:
              valid: false
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /time/valid?timestamp=2016-10-10
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Access-Control-Expose-Headers: ''
            Connection: keep-alive
            Content-Length: 15
            Content-Type: application/json; charset=utf-8
            Date: Wed, 11 Jan 2017 10:27:53 GMT
            ETag: W/"f-/i9mO/upK91ZtL0BkKFGtw"
            Server: nginx/1.10.1
            Vary: Accept-Encoding
            set-cookie: sails.sid=s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI; Path=/; HttpOnly
          body: '{"valid":false}'
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Timestamp validity
        x-testDescription: >-
          A simple `GET` request to `/time/valid` to determine the validity of the timestamp, (current by default).

          This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


          Responses are provided in JSON format, with a valid key to indicate the result. The response code is `200`.


          ```

          {
            valid: true/false
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /time/format:
    get:
      description: >-
        A simple `GET` request to `/time/format` to convert the timestamp to any desired valid format.


        This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


        Responses are provided in JSON format, with a `format` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


        ```

        {
          format: "formatted-timestamp"
        }

        ```
      summary: Format timestamp
      tags:
      - Utilities / Date and Time
      operationId: Format timestamp
      produces:
      - application/json
      parameters:
      - name: timestamp
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      - name: format
        in: query
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /time/format?timestamp=2016-10-10&format=mm
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Format timestamp
        x-testDescription: >-
          A simple `GET` request to `/time/format` to convert the timestamp to any desired valid format.


          This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


          Responses are provided in JSON format, with a `format` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


          ```

          {
            format: "formatted-timestamp"
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /time/unit:
    get:
      description: >-
        A simple `GET` request to `/time/unit` to extract the specified timestamp unit (as provided in the `unit` query parameter). The default unit returned is the `year`.


        This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


        Responses are provided in JSON format, with a `unit` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


        ```

        {
          unit: "extracted-timestamp-unit"
        }

        ```
      summary: Extract timestamp unit
      tags:
      - Utilities / Date and Time
      operationId: Extract timestamp unit
      produces:
      - application/json
      parameters:
      - name: timestamp
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      - name: unit
        in: query
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /time/unit?timestamp=2016-10-10&unit=day
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Extract timestamp unit
        x-testDescription: >-
          A simple `GET` request to `/time/unit` to extract the specified timestamp unit (as provided in the `unit` query parameter). The default unit returned is the `year`.


          This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


          Responses are provided in JSON format, with a `unit` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


          ```

          {
            unit: "extracted-timestamp-unit"
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /time/add:
    get:
      description: >-
        A simple `GET` request to `/time/add` to add units of time to the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).


        This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


        Responses are provided in JSON format, with a `sum` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


        ```

        {
          sum: "sum of (provided / current) and provided timestamps"
        }

        ```
      summary: Time addition
      tags:
      - Utilities / Date and Time
      operationId: Time addition
      produces:
      - application/json
      parameters:
      - name: timestamp
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      - name: years
        in: query
        required: true
        type: integer
        format: int32
        description: ''
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /time/add?timestamp=2016-10-10&years=100
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Time addition
        x-testDescription: >-
          A simple `GET` request to `/time/add` to add units of time to the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).


          This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


          Responses are provided in JSON format, with a `sum` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


          ```

          {
            sum: "sum of (provided / current) and provided timestamps"
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /time/subtract:
    get:
      description: >-
        A simple `GET` request to `/time/subtract` to subtract units of time from the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).


        This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


        Responses are provided in JSON format, with a `difference` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


        ```

        {
          difference: "difference between (provided / current) and provided timestamps"
        }

        ```
      summary: Time subtraction
      tags:
      - Utilities / Date and Time
      operationId: Time subtraction
      produces:
      - application/json
      parameters:
      - name: timestamp
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      - name: years
        in: query
        required: true
        type: integer
        format: int32
        description: ''
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /time/subtract?timestamp=2016-10-10&years=100
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Time subtraction
        x-testDescription: >-
          A simple `GET` request to `/time/subtract` to subtract units of time from the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).


          This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


          Responses are provided in JSON format, with a `difference` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


          ```

          {
            difference: "difference between (provided / current) and provided timestamps"
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /time/start:
    get:
      description: >-
        A simple `GET` request to `/time/object` to return the current / provided timestamp as a JSON object.


        For instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`


        This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


        Responses are provided in JSON format. The response code is `200` for valid query parameters, and `400` otherwise.


        ```

        {
          years: 2016,
          months: 10,
          days: 10,
          hours: 23,
          minutes: 34,
          seconds: 20,
          milliseconds: 980
        }

        ```
      summary: Object representation
      tags:
      - Utilities / Date and Time
      operationId: Object representation
      produces:
      - application/json
      parameters:
      - name: timestamp
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      - name: unit
        in: query
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /time/start?timestamp=2016-10-10&unit=month
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Object representation
        x-testDescription: >-
          A simple `GET` request to `/time/object` to return the current / provided timestamp as a JSON object.


          For instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`


          This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.


          Responses are provided in JSON format. The response code is `200` for valid query parameters, and `400` otherwise.


          ```

          {
            years: 2016,
            months: 10,
            days: 10,
            hours: 23,
            minutes: 34,
            seconds: 20,
            milliseconds: 980
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /time/before:
    get:
      description: >-
        A simple `GET` request to `/time/before` to check if the provided timestamps is before a comparison `target` (query parameter).


        This endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.


        Responses are provided in JSON format, with a `before` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


        ```

        {
          before: true/false
        }

        ```
      summary: Before comparisons
      tags:
      - Utilities / Date and Time
      operationId: Before comparisons
      produces:
      - application/json
      parameters:
      - name: timestamp
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      - name: target
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /time/before?timestamp=2016-10-10&target=2017-10-10
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Before comparisons
        x-testDescription: >-
          A simple `GET` request to `/time/before` to check if the provided timestamps is before a comparison `target` (query parameter).


          This endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.


          Responses are provided in JSON format, with a `before` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


          ```

          {
            before: true/false
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /time/after:
    get:
      description: >-
        A simple `GET` request to `/time/after` to check if the provided timestamps is after a comparison `target` (query parameter).


        This endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.


        Responses are provided in JSON format, with a `after` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


        ```

        {
          after: true/false
        }

        ```
      summary: After comparisons
      tags:
      - Utilities / Date and Time
      operationId: After comparisons
      produces:
      - application/json
      parameters:
      - name: timestamp
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      - name: target
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /time/after?timestamp=2016-10-10&target=2017-10-10
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: After comparisons
        x-testDescription: >-
          A simple `GET` request to `/time/after` to check if the provided timestamps is after a comparison `target` (query parameter).


          This endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.


          Responses are provided in JSON format, with a `after` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


          ```

          {
            after: true/false
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /time/between:
    get:
      description: >-
        A simple `GET` request to `/time/between` to check if the provided timestamp is between a range specified by the `start` and `end` query parameters. A resolution limit can also be specified by the `unit` query parameter.


        For instance, for a resolution `unit` of `month`,

        `2016-10-05` does lie between `2016-11-02` and `2016-09-01`.


        This endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.


        Responses are provided in JSON format, with a `between` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


        ```

        {
          between: true/false
        }

        ```
      summary: Between timestamps
      tags:
      - Utilities / Date and Time
      operationId: Between timestamps
      produces:
      - application/json
      parameters:
      - name: timestamp
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      - name: start
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      - name: end
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /time/between?timestamp=2016-10-10&start=2017-10-10&end=2019-10-10
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Between timestamps
        x-testDescription: >-
          A simple `GET` request to `/time/between` to check if the provided timestamp is between a range specified by the `start` and `end` query parameters. A resolution limit can also be specified by the `unit` query parameter.


          For instance, for a resolution `unit` of `month`,

          `2016-10-05` does lie between `2016-11-02` and `2016-09-01`.


          This endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.


          Responses are provided in JSON format, with a `between` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


          ```

          {
            between: true/false
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /time/leap:
    get:
      description: >-
        A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.


        This endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.


        Responses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


        ```

        {
          leap: true/false
        }

        ```
      summary: Leap year check
      tags:
      - Utilities / Date and Time
      operationId: Leap year check
      produces:
      - application/json
      parameters:
      - name: timestamp
        in: query
        required: true
        type: string
        format: date-time
        description: ''
      responses:
        200:
          description: ''
      security: []
      x-unitTests:
      - request:
          method: GET
          uri: /time/leap?timestamp=2016-10-10
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Leap year check
        x-testDescription: >-
          A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.


          This endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.


          Responses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.


          ```

          {
            leap: true/false
          }

          ```
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /transform/collection:
    post:
      description: ''
      summary: Transform collection from format v2 to v1
      tags:
      - Utilities / Postman Collection
      operationId: Transform collection from format v2 to v1
      produces:
      - application/json
      parameters:
      - name: from
        in: query
        required: true
        type: integer
        format: int32
        description: ''
      - name: to
        in: query
        required: true
        type: integer
        format: int32
        description: ''
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          $ref: '#/definitions/TransformCollectionFromFormatV2ToV1request'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/TransformCollectionFromFormatV1ToV2request'
          examples:
            application/json:
              id: 0c42230c-c8e4-4ca0-a4aa-d393971de8b8
              name: Sample Postman Collection
              description: A sample collection to demonstrate collections as a set of related requests
              order:
              - 3d04ed83-dc1e-40ec-923c-16aa92509e50
              - e02f8160-fb41-4633-be80-cc7d701e85b4
              - 77bd6d4d-1060-4927-aa5c-dcdba7f750cf
              folders: []
              requests:
              - id: 3d04ed83-dc1e-40ec-923c-16aa92509e50
                name: A simple GET request
                collectionId: 1dd68aff-a3fa-4f52-904f-5b75053bc9d9
                method: GET
                headers: ''
                data: []
                rawModeData: ''
                tests: tests['response code is 200'] = (responseCode.code === 200);
                preRequestScript: ''
                url: https://postman-echo.com/get?source=newman-sample-github-collection
              - id: e02f8160-fb41-4633-be80-cc7d701e85b4
                name: A simple POST request
                collectionId: 1dd68aff-a3fa-4f52-904f-5b75053bc9d9
                method: POST
                headers: 'Content-Type: text/plain'
                dataMode: raw
                data: []
                rawModeData: Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...
                url: https://postman-echo.com/post
              - id: 77bd6d4d-1060-4927-aa5c-dcdba7f750cf
                name: A simple POST request with JSON body
                collectionId: 1dd68aff-a3fa-4f52-904f-5b75053bc9d9
                method: POST
                headers: 'Content-Type: application/json'
                dataMode: raw
                data: []
                rawModeData: '{"text":"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium..."}'
                url: https://postman-echo.com/post
      security: []
      x-unitTests:
      - request:
          method: POST
          uri: /transform/collection?from=2&to=1
          headers:
            Content-Type: application/json
          body: >-
            {
              "info": {
                "name": "Sample Postman Collection",
                "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
                "description": "A sample collection to demonstrate collections as a set of related requests"
              },

              "item": [{
                "name": "A simple GET request",
                "event": [{
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": ["tests['response code is 200'] = (responseCode.code === 200);"]
                  }
                }],
                "request": {
                  "url": "https://postman-echo.com/get?source=newman-sample-github-collection",
                  "method": "GET"
                }
              }, {
                "name": "A simple POST request",
                "request": {
                  "url": "https://postman-echo.com/post",
                  "method": "POST",
                  "header": [{
                    "key": "Content-Type",
                    "value": "text/plain"
                  }],
                  "body": {
                    "mode": "raw",
                    "raw": "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium..."
                  }
                }
              }, {
                "name": "A simple POST request with JSON body",
                "request": {
                  "url": "https://postman-echo.com/post",
                  "method": "POST",
                  "header": [{
                    "key": "Content-Type",
                    "value": "application/json"
                  }],
                  "body": {
                    "mode": "raw",
                    "raw": "{\"text\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}"
                  }
                }
              }]
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Access-Control-Allow-Credentials: ''
            Access-Control-Allow-Headers: ''
            Access-Control-Allow-Methods: ''
            Access-Control-Allow-Origin: ''
            Access-Control-Expose-Headers: ''
            Connection: keep-alive
            Content-Encoding: gzip
            Content-Type: application/json; charset=utf-8
            Date: Wed, 11 Jan 2017 10:38:42 GMT
            ETag: W/"569-P9uLZEIyoPfMmQ+U0mTO1A"
            Server: nginx/1.10.1
            Vary: X-HTTP-Method-Override, Accept-Encoding
            set-cookie: sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly
            transfer-encoding: chunked
          body: "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Transform collection from format v2 to v1
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  DigestauthSuccessresponse:
    title: DigestAuth SuccessResponse
    example:
      authenticated: true
    type: object
    properties:
      authenticated:
        description: ''
        type: boolean
    required:
    - authenticated
  BasicAuthresponse:
    title: Basic AuthResponse
    example:
      authenticated: true
    type: object
    properties:
      authenticated:
        description: ''
        type: boolean
    required:
    - authenticated
  Oauth1.0VerifySignatureresponse:
    title: OAuth1.0 Verify SignatureResponse
    example:
      status: pass
      message: OAuth-1.0a signature verification was successful
    type: object
    properties:
      status:
        description: ''
        type: string
      message:
        description: ''
        type: string
    required:
    - status
    - message
  HawkAuthresponse:
    title: Hawk AuthResponse
    example:
      status: pass
      message: Hawk Authentication successful
    type: object
    properties:
      status:
        description: ''
        type: string
      message:
        description: ''
        type: string
    required:
    - status
    - message
  SetCookiesresponse:
    title: Set CookiesResponse
    example:
      cookies:
        foo1: bar
        foo2: bar
    type: object
    properties:
      cookies:
        $ref: '#/definitions/Cookies'
    required:
    - cookies
  Cookies:
    title: Cookies
    type: object
    properties:
      foo1:
        description: ''
        type: string
      foo2:
        description: ''
        type: string
    required:
    - foo1
    - foo2
  GetCookiesresponse:
    title: Get CookiesResponse
    example:
      cookies:
        foo2: bar
    type: object
    properties:
      cookies:
        $ref: '#/definitions/Cookies7'
    required:
    - cookies
  Cookies7:
    title: Cookies7
    type: object
    properties:
      foo2:
        description: ''
        type: string
    required:
    - foo2
  DeleteCookiesresponse:
    title: Delete CookiesResponse
    example:
      cookies:
        foo2: bar
    type: object
    properties:
      cookies:
        $ref: '#/definitions/Cookies7'
    required:
    - cookies
  RequestHeadersresponse:
    title: Request HeadersResponse
    example:
      headers:
        host: echo.getpostman.com
        accept: '*/*'
        accept-encoding: gzip, deflate, sdch
        accept-language: en-US,en;q=0.8
        cache-control: no-cache
        my-sample-header: Lorem ipsum dolor sit amet
        postman-token: 3c8ea80b-f599-fba6-e0b4-a0910440e7b6
        user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36
        x-forwarded-port: 443
        x-forwarded-proto: https
    type: object
    properties:
      headers:
        $ref: '#/definitions/Headers'
    required:
    - headers
  Headers:
    title: Headers
    type: object
    properties:
      host:
        description: ''
        type: string
      accept:
        description: ''
        type: string
      accept-encoding:
        description: ''
        type: string
      accept-language:
        description: ''
        type: string
      cache-control:
        description: ''
        type: string
      my-sample-header:
        description: ''
        type: string
      postman-token:
        description: ''
        type: string
      user-agent:
        description: ''
        type: string
      x-forwarded-port:
        description: ''
        type: string
      x-forwarded-proto:
        description: ''
        type: string
    required:
    - host
    - accept
    - accept-encoding
    - accept-language
    - cache-control
    - my-sample-header
    - postman-token
    - user-agent
    - x-forwarded-port
    - x-forwarded-proto
  ResponseHeadersresponse:
    title: Response HeadersResponse
    example:
      Content-Type: text/html
      test: response_headers
    type: object
    properties:
      Content-Type:
        description: ''
        type: string
      test:
        description: ''
        type: string
    required:
    - Content-Type
    - test
  GetRequestresponse:
    title: GET RequestResponse
    example:
      args:
        test: 123
      headers:
        host: postman-echo.com
        accept: '*/*'
        accept-encoding: gzip, deflate
        cache-control: no-cache
        cookie: sails.sid=s%3AUutrvBPR7oZVxxHmfZEtoZ5i9qKn9pWv.Oc8fg2eMyvx0SPQqHsYjCRIsHsuEtkbBUcfdrjt0J%2B4
        postman-token: c746bc0f-ecf8-49f5-89f7-0f84d202cfc6
        user-agent: PostmanRuntime/6.4.1
        x-forwarded-port: 443
        x-forwarded-proto: https
      url: https://postman-echo.com/get?test=123
    type: object
    properties:
      args:
        $ref: '#/definitions/Args'
      headers:
        $ref: '#/definitions/Headers15'
      url:
        description: ''
        type: string
    required:
    - args
    - headers
    - url
  Args:
    title: Args
    type: object
    properties:
      test:
        description: ''
        type: string
    required:
    - test
  Headers15:
    title: Headers15
    type: object
    properties:
      host:
        description: ''
        type: string
      accept:
        description: ''
        type: string
      accept-encoding:
        description: ''
        type: string
      cache-control:
        description: ''
        type: string
      cookie:
        description: ''
        type: string
      postman-token:
        description: ''
        type: string
      user-agent:
        description: ''
        type: string
      x-forwarded-port:
        description: ''
        type: string
      x-forwarded-proto:
        description: ''
        type: string
    required:
    - host
    - accept
    - accept-encoding
    - cache-control
    - cookie
    - postman-token
    - user-agent
    - x-forwarded-port
    - x-forwarded-proto
  PostRawTextresponse:
    title: POST Raw TextResponse
    example:
      args: {}
      data: >-
        Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.

        Maecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.
      files: {}
      form: {}
      headers:
        host: postman-echo.com
        content-length: 256
        accept: '*/*'
        accept-encoding: gzip, deflate
        cache-control: no-cache
        content-type: text/plain
        cookie: sails.sid=s%3AUutrvBPR7oZVxxHmfZEtoZ5i9qKn9pWv.Oc8fg2eMyvx0SPQqHsYjCRIsHsuEtkbBUcfdrjt0J%2B4
        postman-token: 5a8ce106-bea8-4075-b174-a96cf5fdd8d0
        user-agent: PostmanRuntime/6.4.1
        x-forwarded-port: 443
        x-forwarded-proto: https
      json: null
      url: https://postman-echo.com/post
    type: object
    properties:
      args:
        description: ''
        type: object
      data:
        description: ''
        type: string
      files:
        description: ''
        type: object
      form:
        description: ''
        type: object
      headers:
        $ref: '#/definitions/Headers17'
      json:
        description: ''
        type: string
      url:
        description: ''
        type: string
    required:
    - args
    - data
    - files
    - form
    - headers
    - json
    - url
  Headers17:
    title: Headers17
    type: object
    properties:
      host:
        description: ''
        type: string
      content-length:
        description: ''
        type: string
      accept:
        description: ''
        type: string
      accept-encoding:
        description: ''
        type: string
      cache-control:
        description: ''
        type: string
      content-type:
        description: ''
        type: string
      cookie:
        description: ''
        type: string
      postman-token:
        description: ''
        type: string
      user-agent:
        description: ''
        type: string
      x-forwarded-port:
        description: ''
        type: string
      x-forwarded-proto:
        description: ''
        type: string
    required:
    - host
    - content-length
    - accept
    - accept-encoding
    - cache-control
    - content-type
    - cookie
    - postman-token
    - user-agent
    - x-forwarded-port
    - x-forwarded-proto
  ResponseStatusCoderesponse:
    title: Response Status CodeResponse
    example:
      status: 200
    type: object
    properties:
      status:
        description: ''
        type: integer
        format: int32
    required:
    - status
  DelayResponseresponse:
    title: Delay ResponseResponse
    example:
      delay: 3
    type: object
    properties:
      delay:
        description: ''
        type: string
    required:
    - delay
  TimestampValidityresponse:
    title: Timestamp validityResponse
    example:
      valid: false
    type: object
    properties:
      valid:
        description: ''
        type: boolean
    required:
    - valid
  TransformCollectionFromFormatV1ToV2request:
    title: Transform collection from format v1 to v2Request
    example:
      id: 7875be4b-917d-4aff-8cc4-5606c36bf418
      name: Sample Postman Collection
      description: A sample collection to demonstrate collections as a set of related requests
      order:
      - 4d9134be-e8bf-4693-9cd7-1c0fc66ae739
      - 141ba274-cc50-4377-a59c-e080066f375e
      - 4511ca8b-0bc7-430f-b894-a7ec1036f322
      folders: []
      requests:
      - id: 4d9134be-e8bf-4693-9cd7-1c0fc66ae739
        name: A simple GET request
        collectionId: 877b9dae-a50e-4152-9b89-870c37216f78
        method: GET
        headers: ''
        data: []
        rawModeData: ''
        tests: tests['response code is 200'] = (responseCode.code === 200);
        preRequestScript: ''
        url: https://postman-echo.com/get?source=newman-sample-github-collection
      - id: 141ba274-cc50-4377-a59c-e080066f375e
        name: A simple POST request
        collectionId: 877b9dae-a50e-4152-9b89-870c37216f78
        method: POST
        headers: 'Content-Type: text/plain'
        dataMode: raw
        data: []
        rawModeData: Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...
        url: https://postman-echo.com/post
      - id: 4511ca8b-0bc7-430f-b894-a7ec1036f322
        name: A simple POST request with JSON body
        collectionId: 877b9dae-a50e-4152-9b89-870c37216f78
        method: POST
        headers: 'Content-Type: application/json'
        dataMode: raw
        data: []
        rawModeData: '{"text":"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium..."}'
        url: https://postman-echo.com/post
    type: object
    properties:
      id:
        description: ''
        type: string
      name:
        description: ''
        type: string
      description:
        description: ''
        type: string
      order:
        description: ''
        type: array
        items:
          type: string
      folders:
        description: ''
        type: array
        items:
          type: string
      requests:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Request'
    required:
    - id
    - name
    - description
    - order
    - folders
    - requests
  Request:
    title: Request
    type: object
    properties:
      id:
        description: ''
        type: string
      name:
        description: ''
        type: string
      collectionId:
        description: ''
        type: string
      method:
        description: ''
        type: string
      headers:
        description: ''
        type: string
      data:
        description: ''
        type: array
        items:
          type: string
      rawModeData:
        description: ''
        type: string
      url:
        description: ''
        type: string
      tests:
        description: ''
        type: string
      preRequestScript:
        description: ''
        type: string
      dataMode:
        description: ''
        type: string
    required:
    - id
    - name
    - collectionId
    - method
    - headers
    - data
    - rawModeData
    - url
  TransformCollectionFromFormatV1ToV2response:
    title: Transform collection from format v1 to v2Response
    type: object
    properties:
      variables:
        description: ''
        type: array
        items:
          type: string
      info:
        $ref: '#/definitions/Info'
      item:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Item'
    required:
    - variables
    - info
    - item
  Info:
    title: Info
    type: object
    properties:
      name:
        description: ''
        type: string
      _postman_id:
        description: ''
        type: string
      description:
        description: ''
        type: string
      schema:
        description: ''
        type: string
    required:
    - name
    - _postman_id
    - description
    - schema
  Item:
    title: Item
    type: object
    properties:
      name:
        description: ''
        type: string
      request:
        $ref: '#/definitions/Request28'
      response:
        description: ''
        type: array
        items:
          type: string
      event:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Event'
    required:
    - name
    - request
    - response
  Event:
    title: Event
    type: object
    properties:
      listen:
        description: ''
        type: string
      script:
        $ref: '#/definitions/Script'
    required:
    - listen
    - script
  Script:
    title: Script
    type: object
    properties:
      type:
        description: ''
        type: string
      exec:
        description: ''
        type: array
        items:
          type: string
    required:
    - type
    - exec
  Request28:
    title: Request28
    type: object
    properties:
      url:
        description: ''
        type: string
      method:
        description: ''
        type: string
      header:
        description: ''
        type: array
        items:
          type: string
      body:
        $ref: '#/definitions/Body'
    required:
    - url
    - method
    - header
    - body
  Body:
    title: Body
    type: object
    properties:
      mode:
        description: ''
        type: string
      raw:
        description: ''
        type: string
    required:
    - mode
    - raw
  TransformCollectionFromFormatV2ToV1request:
    title: Transform collection from format v2 to v1Request
    example:
      info:
        name: Sample Postman Collection
        schema: https://schema.getpostman.com/json/collection/v2.0.0/collection.json
        description: A sample collection to demonstrate collections as a set of related requests
      item:
      - name: A simple GET request
        event:
        - listen: test
          script:
            type: text/javascript
            exec:
            - tests['response code is 200'] = (responseCode.code === 200);
        request:
          url: https://postman-echo.com/get?source=newman-sample-github-collection
          method: GET
      - name: A simple POST request
        request:
          url: https://postman-echo.com/post
          method: POST
          header:
          - key: Content-Type
            value: text/plain
          body:
            mode: raw
            raw: Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...
      - name: A simple POST request with JSON body
        request:
          url: https://postman-echo.com/post
          method: POST
          header:
          - key: Content-Type
            value: application/json
          body:
            mode: raw
            raw: '{"text":"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium..."}'
    type: object
    properties:
      info:
        $ref: '#/definitions/Info31'
      item:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Item32'
    required:
    - info
    - item
  Info31:
    title: Info31
    type: object
    properties:
      name:
        description: ''
        type: string
      schema:
        description: ''
        type: string
      description:
        description: ''
        type: string
    required:
    - name
    - schema
    - description
  Item32:
    title: Item32
    type: object
    properties:
      name:
        description: ''
        type: string
      request:
        $ref: '#/definitions/Request35'
      event:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Event'
    required:
    - name
    - request
  Request35:
    title: Request35
    type: object
    properties:
      url:
        description: ''
        type: string
      method:
        description: ''
        type: string
    required:
    - url
    - method
